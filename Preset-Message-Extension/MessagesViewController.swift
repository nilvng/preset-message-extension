//
//  MessagesViewController.swift
//  Message-Preset MessagesExtension
//
//  Created by Nil Nguyen on 20/10/2022.
//

import UIKit
import Messages

class MessagesViewController: MSMessagesAppViewController {
    
    override func viewDidLoad() {
        super.viewDidLoad()
        
        print("up")
        presentViewController()
        // Do any additional setup after loading the view.
    }
    
    // MARK: - Conversation Handling
    
    override func willBecomeActive(with conversation: MSConversation) {
        // Called when the extension is about to move from the inactive to active state.
        // This will happen when the extension is about to present UI.
        
        // Use this method to configure the extension and restore previously stored state.
    }
    
    override func didResignActive(with conversation: MSConversation) {
        // Called when the extension is about to move from the active to inactive state.
        // This will happen when the user dismisses the extension, changes to a different
        // conversation or quits Messages.
        
        // Use this method to release shared resources, save user data, invalidate timers,
        // and store enough state information to restore your extension to its current state
        // in case it is terminated later.
    }
   
    override func didReceive(_ message: MSMessage, conversation: MSConversation) {
        // Called when a message arrives that was generated by another instance of this
        // extension on a remote device.
        
        // Use this method to trigger UI updates in response to the message.
    }
    
    override func didStartSending(_ message: MSMessage, conversation: MSConversation) {
        // Called when the user taps the send button.
    }
    
    override func didCancelSending(_ message: MSMessage, conversation: MSConversation) {
        // Called when the user deletes the message without sending it.
    
        // Use this to clean up state related to the deleted message.
    }
    
    override func willTransition(to presentationStyle: MSMessagesAppPresentationStyle) {
        // Called before the extension transitions to a new presentation style.
        super.willTransition(to: presentationStyle)
        
        removeAllChildViewControllers()
    }
    
    override func didTransition(to presentationStyle: MSMessagesAppPresentationStyle) {
        // Called after the extension transitions to a new presentation style.
        super.didTransition(to: presentationStyle)
    }
    private func presentViewController(with presentationStyle: MSMessagesAppPresentationStyle = .compact) {
        // Remove any child view controllers that have been presented.
        removeAllChildViewControllers()
        
        let controller: UIViewController = instantiatePresetMessageViewController()

        addChild(controller)
        controller.view.translatesAutoresizingMaskIntoConstraints = false
        view.addSubview(controller.view)
        
        NSLayoutConstraint.activate([
            controller.view.leftAnchor.constraint(equalTo: view.leftAnchor),
            controller.view.rightAnchor.constraint(equalTo: view.rightAnchor),
            controller.view.topAnchor.constraint(equalTo: view.topAnchor),
            controller.view.bottomAnchor.constraint(equalTo: view.bottomAnchor)
            ])
        
        controller.didMove(toParent: self)
    }
    // MARK: Convenience
    
    private func removeAllChildViewControllers() {
        for child in children {
            child.willMove(toParent: nil)
            child.view.removeFromSuperview()
            child.removeFromParent()
        }
    }
    
    func instantiatePresetMessageViewController() -> UIViewController{
        let controller = PresetMessageViewController()
        controller.delegate = self
        return controller
    }
    /// - Tag: ComposeMessage
    fileprivate func composeMessage(with presetMessage: PresetMessageViewModel,
                                    caption: String,
                                    session: MSSession? = nil) -> MSMessage {
        var components = URLComponents()
        components.queryItems = presetMessage.queryItems
        
        let layout = MSMessageTemplateLayout()
        layout.image = presetMessage.renderMessageImage(opaque: true)
        layout.caption = caption

        let message = MSMessage(session: session ?? MSSession())
        message.url = components.url!
        message.layout = layout
        
        return message
    }

}
// MARK: PresetMessageViewControllerDelegate
extension MessagesViewController : PresetMessageViewControllerDelegate{
    
    func messageDidSelect(message messageViewModel: PresetMessageViewModel) {
        
        guard let conversation = activeConversation else { fatalError("Expected a conversation") }
        conversation.sendText(messageViewModel.text)

        dismiss()
    }
    
    
}
